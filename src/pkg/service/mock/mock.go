// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	dto "avito-test/dto"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserAccount is a mock of UserAccount interface.
type MockUserAccount struct {
	ctrl     *gomock.Controller
	recorder *MockUserAccountMockRecorder
}

// MockUserAccountMockRecorder is the mock recorder for MockUserAccount.
type MockUserAccountMockRecorder struct {
	mock *MockUserAccount
}

// NewMockUserAccount creates a new mock instance.
func NewMockUserAccount(ctrl *gomock.Controller) *MockUserAccount {
	mock := &MockUserAccount{ctrl: ctrl}
	mock.recorder = &MockUserAccountMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserAccount) EXPECT() *MockUserAccountMockRecorder {
	return m.recorder
}

// CreateUserAccount mocks base method.
func (m *MockUserAccount) CreateUserAccount(user dto.CreateUser) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserAccount", user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserAccount indicates an expected call of CreateUserAccount.
func (mr *MockUserAccountMockRecorder) CreateUserAccount(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserAccount", reflect.TypeOf((*MockUserAccount)(nil).CreateUserAccount), user)
}

// GetAllUsers mocks base method.
func (m *MockUserAccount) GetAllUsers() ([]dto.UserAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsers")
	ret0, _ := ret[0].([]dto.UserAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsers indicates an expected call of GetAllUsers.
func (mr *MockUserAccountMockRecorder) GetAllUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsers", reflect.TypeOf((*MockUserAccount)(nil).GetAllUsers))
}

// GetUserAccountBalanceById mocks base method.
func (m *MockUserAccount) GetUserAccountBalanceById(id int) (dto.UserAccountBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAccountBalanceById", id)
	ret0, _ := ret[0].(dto.UserAccountBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAccountBalanceById indicates an expected call of GetUserAccountBalanceById.
func (mr *MockUserAccountMockRecorder) GetUserAccountBalanceById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAccountBalanceById", reflect.TypeOf((*MockUserAccount)(nil).GetUserAccountBalanceById), id)
}

// MockTransaction is a mock of Transaction interface.
type MockTransaction struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionMockRecorder
}

// MockTransactionMockRecorder is the mock recorder for MockTransaction.
type MockTransactionMockRecorder struct {
	mock *MockTransaction
}

// NewMockTransaction creates a new mock instance.
func NewMockTransaction(ctrl *gomock.Controller) *MockTransaction {
	mock := &MockTransaction{ctrl: ctrl}
	mock.recorder = &MockTransactionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransaction) EXPECT() *MockTransactionMockRecorder {
	return m.recorder
}

// CreateDeposit mocks base method.
func (m *MockTransaction) CreateDeposit(transaction dto.Deposit) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDeposit", transaction)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDeposit indicates an expected call of CreateDeposit.
func (mr *MockTransactionMockRecorder) CreateDeposit(transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeposit", reflect.TypeOf((*MockTransaction)(nil).CreateDeposit), transaction)
}

// CreatePayment mocks base method.
func (m *MockTransaction) CreatePayment(transaction dto.Payment) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePayment", transaction)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePayment indicates an expected call of CreatePayment.
func (mr *MockTransactionMockRecorder) CreatePayment(transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePayment", reflect.TypeOf((*MockTransaction)(nil).CreatePayment), transaction)
}

// CreateRemittance mocks base method.
func (m *MockTransaction) CreateRemittance(transaction dto.Remittance) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRemittance", transaction)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRemittance indicates an expected call of CreateRemittance.
func (mr *MockTransactionMockRecorder) CreateRemittance(transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRemittance", reflect.TypeOf((*MockTransaction)(nil).CreateRemittance), transaction)
}

// CreateReservation mocks base method.
func (m *MockTransaction) CreateReservation(transaction dto.Reservation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReservation", transaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateReservation indicates an expected call of CreateReservation.
func (mr *MockTransactionMockRecorder) CreateReservation(transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReservation", reflect.TypeOf((*MockTransaction)(nil).CreateReservation), transaction)
}

// MockMaintenance is a mock of Maintenance interface.
type MockMaintenance struct {
	ctrl     *gomock.Controller
	recorder *MockMaintenanceMockRecorder
}

// MockMaintenanceMockRecorder is the mock recorder for MockMaintenance.
type MockMaintenanceMockRecorder struct {
	mock *MockMaintenance
}

// NewMockMaintenance creates a new mock instance.
func NewMockMaintenance(ctrl *gomock.Controller) *MockMaintenance {
	mock := &MockMaintenance{ctrl: ctrl}
	mock.recorder = &MockMaintenanceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMaintenance) EXPECT() *MockMaintenanceMockRecorder {
	return m.recorder
}

// CreateService mocks base method.
func (m *MockMaintenance) CreateService(service dto.Service) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateService", service)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateService indicates an expected call of CreateService.
func (mr *MockMaintenanceMockRecorder) CreateService(service interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateService", reflect.TypeOf((*MockMaintenance)(nil).CreateService), service)
}
